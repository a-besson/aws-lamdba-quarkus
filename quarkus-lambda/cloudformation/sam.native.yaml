AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Quarkus - quarkus-amazon-lambda-common-deployment

Globals:
    Api:
        BinaryMediaTypes:
            - "*/*"

Resources:
    QuarkusLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: not.used.in.provided.runtime
            Runtime: provided.al2023
            CodeUri: ../target/function.zip
            MemorySize: 128
            Timeout: 15
            Tracing: Active
            Policies:
                - AWSLambdaBasicExecutionRole
                - CloudWatchLambdaInsightsExecutionRolePolicy
            Role: !Ref QuarkusLambdaLambdaRole
            Layers:
                - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
            Environment:
                Variables:
                    DISABLE_SIGNAL_HANDLERS: true

#
# With java runtime
#
#    QuarkusLambdaJvm:
#        Type: AWS::Serverless::Function
#        Properties:
#            Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
#            Runtime: java21
#            CodeUri: ../target/function.zip
#            MemorySize: 256
#            Timeout: 15
#            Policies: AWSLambdaBasicExecutionRole
#            Role: !GetAtt LambdaIAMRole.Arn
#            LoggingConfig:
#                LogGroup: !Ref LambdaLogGroup
#            FunctionUrlConfig:
#                AuthType: NONE

    QuarkusLambdaLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: LambdaExecutionRole
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: lambda.amazonaws.com
                        Action: sts:AssumeRole
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            Policies:
                -   PolicyName: LambdaExecutionPolicy
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            -   Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: arn:aws:logs:*:*:*

    QuarkusLambdaUrl:
        Type: AWS::Lambda::Url
        Properties:
            AuthType: 'NONE'        # AuthType: AWS_IAM
            TargetFunctionArn: !GetAtt QuarkusLambda.Arn

    QuarkusLambdaUrlPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref QuarkusLambda
            Action: lambda:InvokeFunctionUrl
            Principal: "*"
            FunctionUrlAuthType: 'NONE'

Outputs:
    QuarkusLambda:
        Description: 'Quarkus Lambda ARN'
        Value: !GetAtt QuarkusLambda.Arn

    QuarkusLambdaUrl:
        Description: 'Quarkus Lambda URL'
        Value: !GetAtt QuarkusLambdaUrl.FunctionUrl
